#i!/bin/bash
# shellcheck disable=SC1078,SC1079

# =============================================================================
#   FileName: belloCentOS.sh
#     Author: marslo.jiao@gmail.com
#    Created: 2018-11-08 17:58:12
# LastChange: 2019-09-05 11:41:44
# =============================================================================

TIMESTAMPE=$(date +"%Y%m%d%H%M%S")
SSHDFILE="/etc/ssh/sshd_config"
CURL="/usr/bin/curl"
WGET="/usr/bin/wget"
GREP="/usr/bin/grep"
SED="/usr/bin/sed"
SERVERNAME="SERVERNAME"

rtUser='srv-user-name'
rtPasswd='srv-user-pw'
rtName='artifactory.my.com'

usage="""This script for setup the basic environment in CentOS.
\n\nUSAGE:
\n\t$0 [help]
\n\nRECOMMENDEND:
\n\tRepace the ${SERVERNAME} to your own situation. This is for SSH Banner only.
"""

function help() {
  echo -e ${usage}
}

function reportError() {
  set +H
  echo -e "\\033[31mERROR: $1 !!\\033[0m"
  set -H
}

function reportWarning() {
  set +H
  echo -e "\\033[33mERROR: $1 !!\\033[0m"
  set -H
}

function setupEnv() {
  sudo systemctl stop firewalld
  sudo systemctl disable firewalld
  sudo systemctl mask firewalld
  sudo systemctl is-enabled firewalld
  sudo systemctl is-active firewalld
  sudo firewall-cmd --state
  sudo timedatectl status
  sudo timedatectl set-ntp yes
  sudo timedatectl set-timezone America/Los_Angeles
  sudo timedatectl set-local-rtc 1
  sudo hwclock --systohc --localtime

  sudo cp "/etc/bashrc{,.org.${TIMESTAMPE}}"
  sudo cp "${SSHDFILE}{,.org.${TIMESTAMPE}}"
  [ ! -f $HOME/.bash_profile ] && sudo cp /root/.bash_profile $HOME
  [ ! -f $HOME/.bashrc ] && sudo cp /root/.bashrc $HOME

  sudo chown -R "$(whoami)":root /usr/local
  sudo chown -R "$(whoami)":"$(whoami)" /opt $HOME/.bashrc $HOME/.bash_profile
  sudo usermode -a -G root,adm,wheel "$(whoami)"

  sudo swapoff -a
  sudo bash -c "${SED} -i -e 's:^\\(.*swap.*\\)$:# \\1:' /etc/fstab"
  sudo ${SED} -i '1 i# shellcheck disable=SC2166,SC2034' /etc/bashrc

if ! grep 'generated by marslo' /etc/bashrc > /dev/null 2>&1; then
sudo bash -c 'cat >> /etc/bashrc' << EOF

# generated by marslo
[ -f /usr/local/bin/screenfetch ] && /usr/local/bin/screenfetch

export LANG=en_US.UTF-8
export LANGUAGE=\$LANG
export LC_COLLATE=\$LANG
export LC_CTYPE=\$LANG
export LC_MESSAGES=\$LANG
export LC_MONETARY=\$LANG
export LC_NUMERIC=\$LANG
export LC_TIME=\$LANG
export LC_ALL=\$LANG

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias -- +="pushd ."
alias -- -="popd"
alias ws="cd ~/workspace"
alias la="ls -Al"
alias wa="which -a"
alias kc='kubectl --namespace=kube-system'
alias ka='kubeadm --namespace=kube-system'
alias kl='kubelet --namespace=kube-system'

export SYSTEMD_LESS=FRXMK
EOF
fi

cat > ~/.inputrc << EOF
set convert-meta on
set completion-ignore-case on
set show-all-if-ambiguous on
set show-all-if-unmodified on
set mark-symlinked-directories on
set print-completions-horizontally on
EOF

  sudo iptables -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT
  sudo iptables -A INPUT -p tcp -m tcp --dport 443 -j ACCEPT
  sudo iptables -A  INPUT -m state --state NEW -m udp -p udp --dport 123 -j ACCEPT
  sudo bash -c "iptables-save > /etc/sysconfig/iptables"
  sudo ntpq -p
}

function setupSSHD() {
  sudo bash -c "${SED} -i -e \"s:^\(UsePAM.*$\):# \1:\" ${SSHDFILE}"
  sudo bash -c "${SED} -i -e \"s:^\(PermitRootLogin.*$\):# \1:\" ${SSHDFILE}"
  sudo bash -c "${SED} -i -e \"s:^\(ChallengeResponseAuthentication.*$\):# \1:\" ${SSHDFILE}"
  sudo bash -c "${SED} -i -e \"s:^\(PasswordAuthentication.*$\):# \1:\" ${SSHDFILE}"

sudo bash -c "cat >> ${SSHDFILE}" << EOF

# Add my marslo
PermitRootLogin no
UsePAM no
ChallengeResponseAuthentication no
PasswordAuthentication no
PrintMotd yes
Banner /etc/ssh/server.banner
EOF

  set +o histexpand
  sudo bash -c "figlet -w 2000 -f big \"${SERVERNAME} !\" > /etc/ssh/server.banner"
  set -H

  sudo systemctl restart sshd.service
}

function setupSSH() {
  mkdir -p ~/.ssh
  echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQClCw0e6vrxNWNQehVIeemZ1UMrhVvV9FxVjUkA7AB2SW0kqtrIGxh8tNoPvL0MUm4ga3wgTbITDrVnXeTzh1LE4Wr7j+MRYLbXm6jDp+O5Ow61sBgZjOlX0/7wuDWwfpOafdscmdYKhdatFg6nTDxjiPP44G08N/UWPWuMHxkQNYWj6bt46N8llLOxLJGyTuMjT7TpL6Ubb9WeVo6PYvi+Gl7spHjSHoJ6ZlrcNKxUb7LGh9k1SfXdLeWB079YFCZMrvuVDBYUwwbq6OzrSZnSABdRtR4ylTaHshdQKRmYn3c1/iRybxAwrU5gNYhmikOmWL2Qt0fkINttRswtxKvr marslo@devops" >> ~/.ssh/authorized_keys
  chmod 700 ~/.ssh
  chmod 644 ~/.ssh/authorized_keys
  restorecon -Rf ~/.ssh
}

function installApp() {
  sudo bash -c "cat > /etc/yum.repos.d/wandisco-git.repo" << EOF
[wandisco-git]
name=Wandisco GIT Repository
baseurl=http://opensource.wandisco.com/centos/7/git/\$basearch/
enabled=1
gpgcheck=1
gpgkey=http://opensource.wandisco.com/RPM-GPG-KEY-WANdisco
EOF

  sudo bash -c "cat > /etc/yum.repos.d/artifactory-centos.repo" << EOF
[artifactoryBase]
name=artifactory-centos-$releasever - base
baseurl=https://${rtUser}:${rtPasswd}@${rtName}/artifactory/rpm-centos-remote/$releasever/os/$basearch/
enabled=1
gpgcheck=0
#Optional - if you have GPG signing keys installed, use the below flags to verify the repository metadata signature:
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centos-7
repo_gpgcheck=1

[artifactoryUpdates]
name=artifactory-centos-$releasever - updates
baseurl=https://${rtUser}:${rtPasswd}@${rtName}/artifactory/rpm-centos-remote/$releasever/updates/$basearch/
enabled=1
gpgcheck=0
#Optional - if you have GPG signing keys installed, use the below flags to verify the repository metadata signature:
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centos-7
repo_gpgcheck=1

[artifactoryCentosPlus]
name=artifactory-centos-$releasever - centosplus
baseurl=https://${rtUser}:${rtPasswd}@${rtName}/artifactory/rpm-centos-remote/$releasever/centosplus/$basearch/
enabled=1
gpgcheck=0
#Optional - if you have GPG signing keys installed, use the below flags to verify the repository metadata signature:
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centos-7
repo_gpgcheck=1

[artifactoryExtra]
name=artifactory-centos-$releasever - extras
baseurl=https://${rtUser}:${rtPasswd}@${rtName}/artifactory/rpm-centos-remote/$releasever/extras/$basearch/
enabled=1
gpgcheck=0
#Optional - if you have GPG signing keys installed, use the below flags to verify the repository metadata signature:
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-centos-7
repo_gpgcheck=1
EOF

  sudo bash -c "cat > /etc/yum.repos.d/artifactory-epel.repo" << EOF
[artifactoryepel]
name=artifactory-epel
baseurl=https://${rtUser}:${rtPasswd}@${rtName}/artifactory/rpm-epel-remote/$releasever/$basearch/
enabled=1
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-epel-7

[artifactoryepelDebug]
name=artifactory-epel-debug
baseurl=https://${rtUser}:${rtPasswd}@${rtName}/artifactory/rpm-epel-remote/$releasever/$basearch/debug
enabled=1
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-epel-7
EOF

  sudo yum-config-manager --disable base
  sudo yum-config-manager --disable centosplus
  sudo yum-config-manager --disable updates
  sudo yum-config-manager --disable epel

  sudo rpm --import http://opensource.wandisco.com/RPM-GPG-KEY-WANdisco
  sudo yum -y check-update
  sudo yum install -y yum-utils device-mapper-persistent-data lvm2 epel-release
  sudo yum-config-manager --enable extras

  sudo yum -y check-update
  sudo yum install -y dos2unix figlet shellcheck tree iftop htop dstat sysstat traceroute ctags tig screen inxi hdparm cmake cmake3 cmake3-doc openssl-devel clang-devel clang clang-analyzer ntp ntpdate ntp-doc tmux yum-plugin-versionlock ImageMagick gcc libcap-devel mlocate

  sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
  sudo yum-config-manager --disable docker-ce-edge
  sudo yum-config-manager --disable docker-ce-test
  sudo yum-config-manager --disable docker-ce-nightly
  sudo yum-config-manager --enable extras

  sudo yum check-update
  sudo yum remove docker \
                  docker-client \
                  docker-client-latest \
                  docker-common \
                  docker-latest \
                  docker-latest-logrotate \
                  docker-logrotate \
                  docker-engine
  sudo yum install -y docker-ce-19.03.1-3.el7 docker-ce-cli-19.03.1-3.el7 containerd.io
  # sudo yum install -y docker-ce-18.06.1.ce-3.el7.x86_64
  sudo yum versionlock docker-ce*
  yum versionlock list

  git clone https://github.com/KittyKatt/screenFetch.git /opt/screenFetch
  sudo chmod +x /opt/screenFetch/screenfetch-dev
  sudo ln -sf /opt/tools/screenFetch/screenfetch-dev /usr/local/bin/screenfetch
  sudo bash -c 'cat >> /etc/yum.conf' << EOF
clean_requirements_on_remove=1
exclude=docker-ce*
EOF

  sudo systemctl stop ntpd
  curl 'https://www.eecis.udel.edu/~ntp/ntp_spool/ntp4/ntp-4.2/ntp-4.2.8p12.tar.gz' --create-dirs -o /opt/tools/ntp-4.2.8p12.tar.gz
  tar xzf /opt/tools/ntp-4.2.8p12.tar.gz -C /opt/tools/ && cd "$_"ntp-4.2.8p12
  ./configure --prefix=/usr --bindir=/usr/sbin --sysconfdir=/etc --enable-linuxcaps --with-lineeditlibs=readline --docdir=/usr/share/doc/ntp-4.2.8p12 && make
  sudo make install && sudo install -v -o ntp -g ntp -d /var/lib/ntp
  ntpd --version
  ntpstat
}

function setupCentOS() {
    setupEnv
    installApp
    setupSSHD
    setupSSH
}

if [ "$1" = "help" ]; then
  help
  exit 0
else
  for cmd in ${GREP} ${CURL} ${SED} ${WGET}; do
    [ ! -f ${cmd} ] && reportError "Command ${cmd} cannot be found in system!"; exit 1
  done
  [ "SERVERNAME" == "${SERVERNAME}" ] && reportWarning "haven't been setup!"
  setupCentOS
fi
